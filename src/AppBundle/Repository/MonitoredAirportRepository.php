<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\MonitoredAirport;

/**
 * AirportsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MonitoredAirportRepository extends EntityRepository
{
    /**
     * @param int $alternate
     *
     * @return MonitoredAirport[] array
     */
    public function getSeasonActiveAirports($alternate = 0, $season)
    {
        $qb = $this->createQueryBuilder('a');
        if ($season == 0) {
            $qb->where('a.activeWinter = 1');
            if ($alternate == 1) {
                $qb->andWhere('a.alternateWinter = 1');
            } else {
                $qb->andWhere('a.alternateWinter = 0');
            }
        } elseif ($season == 1) {
            $qb->where('a.activeSummer = 1');
            if ($alternate == 1) {
                $qb->andWhere('a.alternateSummer = 1');
            } else {
                $qb->andWhere('a.alternateSummer = 0');
            }
        }

        $airports = $qb->getQuery()->getResult();

        $airportsArray = $this->airportsObjectToArray($airports);

        return $airportsArray;
    }

    /**
     * @param bool $season
     * @param \DateTime $referenceTime
     * 
     * @return \AppBundle\Entity\MonitoredAirport[]
     */
    public function getAirportsWithOldMetar($season, $referenceTime)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.rawMetarDateTime < :datetime')
            ->orWhere('a.rawMetarDateTime IS NULL');

        if ($season == 0) {
            $qb->andWhere('a.activeWinter = 1');
            $qb->andWhere('a.alternateWinter = 0');
        } elseif ($season == 1) {
            $qb->andWhere('a.activeSummer = 1');
            $qb->andWhere('a.alternateSummer = 0');
        }

        $qb->setParameter('datetime', $referenceTime);

        $airports = $qb->getQuery()->getResult();

        $airportsArray = $this->airportsObjectToArray($airports);

        return $airportsArray;
    }

    /**
     * @param $airports
     * @param $airportsArray
     *
     * @return MonitoredAirport[] array
     */
    private function airportsObjectToArray($airports)
    {
        $airportsArray = [];

        /** @var MonitoredAirport $airport */
        foreach ($airports as $airport) {
            $airportsArray[$airport->getAirportData()->getAirportIcao()] = $airport;
        }

        return $airportsArray;
    }
}
